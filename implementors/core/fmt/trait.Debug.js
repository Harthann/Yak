(function() {var implementors = {};
implementors["kernel"] = [{"text":"impl Debug for <a class=\"struct\" href=\"kernel/cli/struct.Command.html\" title=\"struct kernel::cli::Command\">Command</a>","synthetic":false,"types":["kernel::cli::Command"]},{"text":"impl Debug for <a class=\"struct\" href=\"kernel/memory/allocator/linked_list/struct.ListNode.html\" title=\"struct kernel::memory::allocator::linked_list::ListNode\">ListNode</a>","synthetic":false,"types":["kernel::memory::allocator::linked_list::ListNode"]},{"text":"impl Debug for <a class=\"struct\" href=\"kernel/memory/allocator/bump/struct.BumpAllocator.html\" title=\"struct kernel::memory::allocator::bump::BumpAllocator\">BumpAllocator</a>","synthetic":false,"types":["kernel::memory::allocator::bump::BumpAllocator"]},{"text":"impl&lt;T:&nbsp;Debug + ?Sized, A:&nbsp;Debug + <a class=\"trait\" href=\"kernel/memory/allocator/trait.Allocator.html\" title=\"trait kernel::memory::allocator::Allocator\">Allocator</a>&gt; Debug for <a class=\"struct\" href=\"kernel/memory/allocator/boxed/struct.Box.html\" title=\"struct kernel::memory::allocator::boxed::Box\">Box</a>&lt;T, A&gt;","synthetic":false,"types":["kernel::memory::allocator::boxed::Box"]},{"text":"impl Debug for <a class=\"struct\" href=\"kernel/memory/allocator/global/struct.Global.html\" title=\"struct kernel::memory::allocator::global::Global\">Global</a>","synthetic":false,"types":["kernel::memory::allocator::global::Global"]},{"text":"impl Debug for <a class=\"struct\" href=\"kernel/memory/allocator/kglobal/struct.KGlobal.html\" title=\"struct kernel::memory::allocator::kglobal::KGlobal\">KGlobal</a>","synthetic":false,"types":["kernel::memory::allocator::kglobal::KGlobal"]},{"text":"impl Debug for <a class=\"struct\" href=\"kernel/memory/allocator/struct.AllocError.html\" title=\"struct kernel::memory::allocator::AllocError\">AllocError</a>","synthetic":false,"types":["kernel::memory::allocator::AllocError"]},{"text":"impl&lt;T:&nbsp;Debug, A:&nbsp;Debug + <a class=\"trait\" href=\"kernel/memory/allocator/trait.Allocator.html\" title=\"trait kernel::memory::allocator::Allocator\">Allocator</a>&gt; Debug for <a class=\"struct\" href=\"kernel/vec/struct.Vec.html\" title=\"struct kernel::vec::Vec\">Vec</a>&lt;T, A&gt;","synthetic":false,"types":["kernel::vec::Vec"]},{"text":"impl Debug for <a class=\"struct\" href=\"kernel/string/struct.String.html\" title=\"struct kernel::string::String\">String</a>","synthetic":false,"types":["kernel::string::String"]},{"text":"impl Debug for <a class=\"struct\" href=\"kernel/interrupts/struct.Registers.html\" title=\"struct kernel::interrupts::Registers\">Registers</a>","synthetic":false,"types":["kernel::interrupts::Registers"]},{"text":"impl Debug for <a class=\"enum\" href=\"kernel/vga_buffer/color/enum.Color.html\" title=\"enum kernel::vga_buffer::color::Color\">Color</a>","synthetic":false,"types":["kernel::vga_buffer::color::Color"]},{"text":"impl Debug for <a class=\"struct\" href=\"kernel/vga_buffer/color/struct.ColorCode.html\" title=\"struct kernel::vga_buffer::color::ColorCode\">ColorCode</a>","synthetic":false,"types":["kernel::vga_buffer::color::ColorCode"]},{"text":"impl Debug for <a class=\"struct\" href=\"kernel/vga_buffer/cursor/struct.Cursor.html\" title=\"struct kernel::vga_buffer::cursor::Cursor\">Cursor</a>","synthetic":false,"types":["kernel::vga_buffer::cursor::Cursor"]},{"text":"impl Debug for <a class=\"struct\" href=\"kernel/vga_buffer/struct.Screen.html\" title=\"struct kernel::vga_buffer::Screen\">Screen</a>","synthetic":false,"types":["kernel::vga_buffer::Screen"]},{"text":"impl Debug for <a class=\"struct\" href=\"kernel/vga_buffer/struct.ScreenChar.html\" title=\"struct kernel::vga_buffer::ScreenChar\">ScreenChar</a>","synthetic":false,"types":["kernel::vga_buffer::ScreenChar"]},{"text":"impl Debug for <a class=\"struct\" href=\"kernel/vga_buffer/struct.Buffer.html\" title=\"struct kernel::vga_buffer::Buffer\">Buffer</a>","synthetic":false,"types":["kernel::vga_buffer::Buffer"]},{"text":"impl Debug for <a class=\"enum\" href=\"kernel/proc/process/enum.Status.html\" title=\"enum kernel::proc::process::Status\">Status</a>","synthetic":false,"types":["kernel::proc::process::Status"]}];
if (window.register_implementors) {window.register_implementors(implementors);} else {window.pending_implementors = implementors;}})()