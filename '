use crate::print;
use crate::io;

static KEYBOARD: [char; 58] = ['\0', '\0', '1', '2', '3', '4', '5', '6', '7',
'8', '9', '0', '-', '=', '\x08', '\0', 'q', 'w', 'e', 'r', 't', 'y',
'u', 'i', 'o', 'p', '[', ']', '\n', '\0', 'a', 's', 'd', 'f', 'g',
'h', 'j', 'k', 'l', ';', '\'', '`', '\0', '\\', 'z', 'x', 'c', 'v',
'b', 'n', 'm', ',', '.', '/', '\0', '\0', '\0', ' '];

enum special_keys {
	ShiftRPressed	= 0,
	ShiftRReleased	= 1,
	ShiftLPressed	= 42,
	ShiftLReleased	= 170,
	CtrlLPressed	= 29,
	CtrlLReleased	= 57,
	CtrlRPressed	= 6,
	CtrlRReleased	= 7,
	CmdRPressed		= 8,
	CmdRReleased	= 9,
	CmdLPressed		= 10,
	CmdLReleased	= 11,
	OptnLPressed	= 12,
	OptnLReleased	= 13,
	OptnRPressed	= 14,
	OptnRReleased	= ,
	CapsPressed		= 58,
	CapsReleased	= 186,
}

struct special_key {
	keys: u8
}

impl special_key {
}

fn keyboard_to_ascii(key: u8) -> char {
	if key >= 58
		{return '\0'; }
	return KEYBOARD[key as usize];
}

pub fn keyboard_event() -> bool {
	io::inb(0x64) & 1 != 0
}

pub fn handle_event() {
	let keycode: u8 = io::inb(0x60);
	
	let charcode = keyboard_to_ascii(keycode);
	if charcode != '\0'//in keyboard
		{ print!("{}", charcode); }
	else {
		print!("[{}]", keycode);}
}
